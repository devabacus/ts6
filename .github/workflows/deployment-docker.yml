
name: Build and Deploy to Kubernetes

on:
  push:
    branches: [ master ] # Убедитесь, что это ваша основная ветка
  workflow_dispatch:

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    # "Выводим" наружу сгенерированный тег, чтобы другие задачи могли его использовать
    outputs:
      tag: ${{ steps.meta.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      # Этот шаг извлекает метаданные, включая уникальный тег (хеш коммита)
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: dbe81550-wise-chickadee.registry.twcstorage.ru/ts6-server
          tags: |
            type=sha,prefix=,format=short

      - name: Log in to Timeweb Container Registry
        uses: docker/login-action@v3
        with:
          registry: dbe81550-wise-chickadee.registry.twcstorage.ru
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./ts6_server
          file: ./ts6_server/Dockerfile.prod
          push: true
          tags: ${{ steps.meta.outputs.tags }} # Используем сгенерированный уникальный тег
          labels: ${{ steps.meta.outputs.labels }}

  deploy-to-cluster:
    needs: build-and-push-image # Запускается после сборки
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Kubeconfig
        uses: azure/k8s-set-context@v4
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Create or Update Image Pull Secret
        run: |
          kubectl create secret docker-registry timeweb-registry-secret \
            --docker-server=dbe81550-wise-chickadee.registry.twcstorage.ru \
            --docker-username=${{ secrets.REGISTRY_USER }} \
            --docker-password=${{ secrets.REGISTRY_PASSWORD }} \
            --docker-email=${{ secrets.REGISTRY_EMAIL }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create or Update Kubernetes Secret for Serverpod
        run: |
          kubectl create secret generic serverpod-secrets-ts6 \
            --from-literal=database-password='${{ secrets.DB_PASSWORD }}' \
            --from-literal=redis-password='${{ secrets.REDIS_PASSWORD }}' \
            --from-literal=service-secret='${{ secrets.SERVICE_SECRET }}' \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Update manifests with new image tag
        run: |
          echo "--- Updating manifests with image tag: ${{ needs.build-and-push-image.outputs.tag }} ---"
          
          # Более точная команда sed, которая заменяет конкретную строку
          sed -i 's|image: dbe81550-wise-chickadee.registry.twcstorage.ru/ts6-server:latest|image: dbe81550-wise-chickadee.registry.twcstorage.ru/ts6-server:${{ needs.build-and-push-image.outputs.tag }}|g' ts6_server/k8s/deployment.yaml
          sed -i 's|image: dbe81550-wise-chickadee.registry.twcstorage.ru/ts6-server:latest|image: dbe81550-wise-chickadee.registry.twcstorage.ru/ts6-server:${{ needs.build-and-push-image.outputs.tag }}|g' ts6_server/k8s/job.yaml
          
          echo "--- Verifying deployment.yaml content after sed ---"
          cat ts6_server/k8s/deployment.yaml
          
          echo "--- Verifying job.yaml content after sed ---"
          cat ts6_server/k8s/job.yaml

      # ОБЪЕДИНЕННЫЙ ШАГ ПРИМЕНЕНИЯ МАНИФЕСТОВ
      - name: Apply all Kubernetes manifests
        run: |
          # Сначала применяем конфигурации и сервисы
          kubectl apply -f ts6_server/k8s/configmap.yaml
          kubectl apply -f ts6_server/k8s/service.yaml
          kubectl apply -f ts6_server/k8s/ingress.yaml

          # Затем применяем основной deployment
          kubectl apply -f ts6_server/k8s/deployment.yaml
          
          # И, наконец, запускаем задачу миграции
          kubectl delete job serverpod-migration-job-ts6 --ignore-not-found=true
          kubectl apply -f ts6_server/k8s/job.yaml
      
      # Ожидаем завершения миграции
      - name: Wait for migration job to complete
        run: kubectl wait --for=condition=complete job/serverpod-migration-job-ts6 --timeout=5m

      # Проверяем статус развертывания
      - name: Check deployment rollout status
        run: kubectl rollout status deployment/ts6-server-deployment --timeout=2m

    